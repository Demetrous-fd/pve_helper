import logging
import string
import re

from vkbottle import Keyboard, KeyboardButtonColor, Text, VKAPIError
from pydantic import HttpUrl, parse_obj_as, ValidationError
from vkbottle.bot import Bot, Message
from vkbottle import BaseStateGroup

from bot.rules import AdminRule
from bot.storage import Storage
from settings import settings
import helper

# TODO: —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è letsencrypt –∏ pve –∑–∞–¥–∞—á
# TODO: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ssh-–∫–ª—é—á–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

bot = Bot(settings.vk_token)
bot.labeler.custom_rules["admin_access"] = AdminRule
storage = Storage()

logging.basicConfig(level=logging.INFO)

ALLOW_DOMAIN_CHAR = set(string.digits + string.ascii_lowercase + "-")

ADMIN_IDS = settings.vk_admins

GROUPS = ["–ò-19-1", "–ò-20-1", "–ò-21-1", "–ò-22-1", "–ò-22-2–ö", ]
GROUP_KEYBOARD = Keyboard(one_time=True)
GROUP_KEYBOARD.add(Text("–ò-19-1", {"group": "–ò-19-1"}))
GROUP_KEYBOARD.add(Text("–ò-20-1", {"group": "–ò-20-1"}))
GROUP_KEYBOARD.add(Text("–ò-21-1", {"group": "–ò-21-1"}))
GROUP_KEYBOARD.add(Text("–ò-22-1", {"group": "–ò-22-1"}))
GROUP_KEYBOARD.add(Text("–ò-22-2–ö", {"group": "–ò-22-2–ö"}))
GROUP_KEYBOARD = GROUP_KEYBOARD.get_json()


def get_vm_list_keyboard(user_id: int):
    keyboard = Keyboard(one_time=True)
    for template, name in helper.pve.VM._value2member_map_.keys():
        keyboard.add(Text(name[:40], {"vm": [template, name], "user_id": user_id}))
    return keyboard.get_json()


def get_inline_keyboard(user_id: int):
    inline_form_keyboard = Keyboard(inline=True)
    inline_form_keyboard.add(
        Text("–ü—Ä–∏–Ω—è—Ç—å", {"id": user_id, "status": "OK"}), color=KeyboardButtonColor.POSITIVE
    )
    inline_form_keyboard.add(
        Text("–û—Ç–∫–∞–∑–∞—Ç—å", {"id": user_id, "status": "REJECT"}), color=KeyboardButtonColor.NEGATIVE
    )
    return inline_form_keyboard.get_json()


class State(BaseStateGroup):
    FIO = "fio"
    USERNAME = "username"
    GROUP = "group"
    SUBDOMAIN = "subdomain"
    SSH_KEY = "ssh_key"
    END_FORM = "end_form"
    ANY = "*"


class AnyValue:
    def __eq__(self, other):
        return True


@bot.on.message(regex=[re.compile(".*–∞—á–∞—Ç—å"), re.compile(".*/start")])
async def start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤:")
    await bot.state_dispenser.set(message.peer_id, State.FIO)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:")


@bot.on.message(state=State.FIO)
async def form_fio(message: Message):
    await bot.state_dispenser.set(message.peer_id, State.USERNAME)
    await storage.set(message.peer_id, {"fio": message.text})
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π –ª–æ–≥–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")


@bot.on.message(state=State.USERNAME)
async def form_username(message: Message):
    if len(message.text) < 4:
        await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω –±–æ–ª—å—à–µ–π –¥–ª–∏–Ω—ã.")
        return
    if len(message.text) > 32:
        await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω –º–µ–Ω—å—à–µ–π –¥–ª–∏–Ω—ã.")
        return
    if helper.pve.user_exists(message.text):
        await message.answer("–î–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return
    await bot.state_dispenser.set(message.peer_id, State.GROUP)
    await storage.set(message.peer_id, {"username": message.text})
    await message.answer("–ò–∑ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã ?", keyboard=GROUP_KEYBOARD)


@bot.on.message(state=State.GROUP)
async def form_group(message: Message):
    await bot.state_dispenser.set(message.peer_id, State.SUBDOMAIN)
    await storage.set(message.peer_id, {"group": message.text})
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø–æ–¥–¥–æ–º–µ–Ω–∞, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 16 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
        f"–ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –í–ú, –≤–∞—à —Å–∞–π—Ç –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É <–≤–∞—à –ø–æ–¥–¥–æ–º–µ–Ω>.{settings.nginx_domain}, "
        f"—Ç–∞–∫–∂–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ–¥–¥–æ–º–µ–Ω—ã <any>.<–≤–∞—à –ø–æ–¥–¥–æ–º–µ–Ω>.{settings.nginx_domain}"
    )


@bot.on.message(state=State.SUBDOMAIN)
async def form_subdomain(message: Message):
    if not message.text:
        return

    subdomain = message.text.lower().split(".", 1)[0]
    try:
        parse_obj_as(HttpUrl, f"https://{subdomain}.{settings.nginx_domain}")
        if set(subdomain).difference(ALLOW_DOMAIN_CHAR):
            raise ValueError
    except (ValidationError, ValueError):
        await message.answer("–í–∞—à –ø–æ–¥–¥–æ–º–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return

    if len(subdomain) < 2:
        await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ–¥–¥–æ–º–µ–Ω –±–æ–ª—å—à–µ–π –¥–ª–∏–Ω—ã.")
        return

    if len(subdomain) > 16:
        await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–æ–¥–¥–æ–º–µ–Ω –º–µ–Ω—å—à–µ–π –¥–ª–∏–Ω—ã.")
        return

    if helper.pve.vm_with_domain_exists(subdomain):
        await message.answer("–î–∞–Ω–Ω—ã–π –ø–æ–¥–¥–æ–º–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –¥—Ä—É–≥–æ–π.")
        return

    await bot.state_dispenser.set(message.peer_id, State.SSH_KEY)
    await storage.set(message.peer_id, {"subdomain": subdomain})
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –ø—É–±–ª–∏—á–Ω—ã–π ssh-–∫–ª—é—á (—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞: id_*.pub)\n"
        "–ö–ª—é—á–∏ –æ—Ç ssh –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –ø—É—Ç–∏: %USERPROFILE%\\.ssh \n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Ç ssh-–∫–ª—é—á–µ–π, —Ç–æ —Å–æ–∑–¥–∞–π –∏—Ö —Å–ª–µ–¥—É—è —à–∞–≥–∞–º –∏–∑ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏: "
        "https://vk.com/@-219467009-kak-ispolzovat-ssh?anchor=sozdanie-pary-klyuchey"
    )


@bot.on.message(state=State.SSH_KEY)
async def form_ssh_key(message: Message):

    if not helper.bastion.check_public_key(message.text):
        await message.answer("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π ssh-–∫–ª—é—á, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É ssh-–∫–ª—é—á–µ–π")
        return

    await bot.state_dispenser.set(message.peer_id, State.ANY)
    await storage.set(message.peer_id, {"ssh-key": message.text})
    await message.answer(
        f"–°–ø–∞—Å–∏–±–æ, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–¥–∞–¥–∏–º –¥–æ—Å—Ç—É–ø."
    )
    form_data = (await storage.get(message.peer_id)).storage
    text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @id{message.peer_id}\n" \
           f"–§–ò–û: {form_data['fio']}\n" \
           f"–ù–∏–∫: {form_data['username']}\n" \
           f"–ì—Ä—É–ø–ø–∞: {form_data['group']}\n" \
           f"–ü–æ–¥–¥–æ–º–µ–Ω: {form_data['subdomain']}\n" \
           f"SSH public key: {form_data['ssh-key']}"
    await bot.api.messages.send(
        peer_ids=ADMIN_IDS, random_id=0, message=text,
        keyboard=get_inline_keyboard(message.peer_id)
    )


@bot.on.message(admin_access=True, payload_contains={"status": "OK"})
async def ok_form(message: Message):
    payload = message.get_payload_json()
    user = payload['id']
    await message.answer(f"–í—ã–±–æ—Ä –í–ú –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @id{user}", keyboard=get_vm_list_keyboard(user))


@bot.on.message(admin_access=True, payload_contains={"status": "REJECT"})
async def reject_form(message: Message):
    payload = message.get_payload_json()
    await bot.state_dispenser.delete(payload["id"])
    await bot.api.messages.send(
        peer_id=payload["id"], random_id=0,
        message="–ì—Ä—É—Å—Ç–Ω–æ, –Ω–æ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–∫–∞–∑ üòî"
    )


@bot.on.message(admin_access=True, payload_contains={"vm": AnyValue()})
async def create_user_vm(message: Message):
    payload = message.get_payload_json()
    vm = payload.get("vm", ("ubuntu-22.04-1G.json", "Ubuntu server 22.04 1G RAM"))
    user_id = payload.get("user_id", 0)
    if user_id == 0:
        return

    await bot.api.messages.send(
        peer_id=user_id, random_id=0, message="Wait üåö"
    )
    form_data = (await storage.get(user_id)).storage
    password = helper.pve.generate_password()
    helper.pve.run_new_user_task(
        user=form_data["username"],
        password=password,
        domain=form_data["subdomain"],
        ssh_key=form_data["ssh-key"],
        template=vm[0]
    )
    helper.bastion.load_public_key(form_data["ssh-key"])
    helper.nginx.run_new_user_task(form_data["subdomain"], "apt")
    text = f"–í–∞–º –≤—ã–¥–∞–Ω–∞ VM: {vm[1]}\n" \
           f"–õ–æ–≥–∏–Ω: root\n" \
           f"–ü–∞—Ä–æ–ª—å: {settings.pve_vm_default_password}\n" \
           f"–í–∞—à –ø–æ–¥–¥–æ–º–µ–Ω: https://{form_data['subdomain']}.{settings.nginx_domain}\n\n" \
           f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: https://space.{settings.nginx_domain}\n" \
           f"–õ–æ–≥–∏–Ω: {form_data['username']}\n" \
           f"–ü–∞—Ä–æ–ª—å: {password}\n\n" \
           "SSH jump-—Å–µ—Ä–≤–µ—Ä:\n" \
           f"–ê–¥—Ä–µ—Å: {settings.nginx_domain}\n" \
           "User: jump\n\n" \
           "SSH –≤–∞—à-—Å–µ—Ä–≤–µ—Ä:\n" \
           f"–ê–¥—Ä–µ—Å: {form_data['subdomain']}.{settings.nginx_localdomain}\n" \
           "User: root\n\n" \
           "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø –∫ VM —á–µ—Ä–µ–∑ ssh:\n" \
           f"\tssh -J jump@{settings.nginx_domain} root@{form_data['subdomain']}.{settings.nginx_localdomain}\n\n"
    await bot.api.messages.send(
        peer_id=user_id, random_id=0,
        message=text
    )
    await bot.api.messages.send(
        peer_ids=ADMIN_IDS, random_id=0, message=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {user_id} –≤—ã–¥–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ"
    )


@bot.error_handler.register_error_handler(Exception)
async def runtime_error_handler(e: Exception):
    logging.error("–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ runtime", e)
    try:
        await bot.api.messages.send(
            peer_ids=ADMIN_IDS, random_id=0,
            message=f"–≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}"
        )
    except VKAPIError:
        pass
